services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: roommate_mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_DATABASE=roommate_app
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - roommate_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/roommate_app --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: roommate_backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - MONGO_URL=${MONGO_URL:-mongodb://mongodb:27017/roommate_app}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - YANDEX_MAPS_API_KEY=${YANDEX_MAPS_API_KEY}
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./backend:/app
    networks:
      - roommate_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL}
    container_name: roommate_frontend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - REACT_APP_BACKEND_URL=${REACT_APP_BACKEND_URL}
      - REACT_APP_PRODUCTION_URL=${REACT_APP_PRODUCTION_URL}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - roommate_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: roommate_nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      frontend:
        condition: service_healthy
      backend:
        condition: service_healthy
    networks:
      - roommate_network

volumes:
  mongodb_data:
    driver: local

networks:
  roommate_network:
    driver: bridge