import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.types import WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Bot token from environment
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
WEB_APP_URL = os.getenv('WEB_APP_URL', 'https://your-app-domain.com')

if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is required")

# Initialize bot and dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start_command(message: types.Message):
    """Handle /start command"""
    user = message.from_user
    
    # Create Web App button
    web_app = WebAppInfo(url=WEB_APP_URL)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üè† –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=web_app
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                    callback_data="about"
                )
            ]
        ]
    )
    
    welcome_text = f"""
üè† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–µ!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üó∫Ô∏è –ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ
‚Ä¢ üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–æ—Å–µ–¥–∞–º–∏
‚Ä¢ üíï –ù–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ –±—é–¥–∂–µ—Ç—É
‚Ä¢ ‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
2. –ò—â–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ –≤ –Ω—É–∂–Ω–æ–º —Ä–∞–π–æ–Ω–µ
3. –ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞–º–∏
4. –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–∞—Ö

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá
    """
    
    await message.answer(
        welcome_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "about")
async def about_callback(callback_query: types.CallbackQuery):
    """Handle about button"""
    about_text = """
<b>üì± –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ "–ü–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π"</b>

<b>üéØ –¶–µ–ª—å:</b>
–ü–æ–º–æ—á—å –ª—é–¥—è–º –Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É –∏ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Å–æ—Å–µ–¥–µ–π –≤ –ú–æ—Å–∫–≤–µ

<b>‚ú® –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ª–∞–π–∫–æ–≤ –∏ –º–∞—Ç—á–∏–Ω–≥–∞
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –±—é–¥–∂–µ—Ç—É –∏ –ª–æ–∫–∞—Ü–∏–∏
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —á–µ—Ä–µ–∑ Telegram

<b>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–∞—Ö
‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π

<b>üÜì –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>

–£–¥–∞—á–∏ –≤ –ø–æ–∏—Å–∫–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∂–∏–ª—å—è! üè†
    """
    
    # Return to main menu button
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üè† –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=WEB_APP_URL)
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_start"
                )
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        about_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.callback_query(lambda c: c.data == "back_to_start")
async def back_to_start_callback(callback_query: types.CallbackQuery):
    """Handle back to start button"""
    user = callback_query.from_user
    
    web_app = WebAppInfo(url=WEB_APP_URL)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üè† –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=web_app
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                    callback_data="about"
                )
            ]
        ]
    )
    
    welcome_text = f"""
üè† <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ–∏—Å–∫ —Å–æ—Å–µ–¥–µ–π –ø–æ –∫–≤–∞—Ä—Ç–∏—Ä–µ!</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ üó∫Ô∏è –ù–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –≤–∞—à–µ–º —Ä–∞–π–æ–Ω–µ
‚Ä¢ üë• –ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–æ—Å–µ–¥—è–º–∏
‚Ä¢ üíï –ù–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ –±—é–¥–∂–µ—Ç—É
‚Ä¢ ‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –≤–∞—à–∏–º–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏
2. –ò—â–∏—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ –≤ –Ω—É–∂–Ω–æ–º —Ä–∞–π–æ–Ω–µ
3. –ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥—Ä—É–≥–∏–º–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞–º–∏
4. –û–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –ø—Ä–∏ –≤–∑–∞–∏–º–Ω—ã—Ö –ª–∞–π–∫–∞—Ö

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üëá
    """
    
    await callback_query.message.edit_text(
        welcome_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@dp.message()
async def handle_other_messages(message: types.Message):
    """Handle any other messages"""
    web_app = WebAppInfo(url=WEB_APP_URL)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üè† –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=web_app
                )
            ]
        ]
    )
    
    await message.answer(
        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–∫—Ä–æ–π—Ç–µ Web App üëÜ",
        reply_markup=keyboard
    )

async def main():
    """Main function to run the bot"""
    logger.info("Starting Telegram Bot...")
    
    try:
        # Start polling
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Error in bot: {e}")
    finally:
        await bot.session.close()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")